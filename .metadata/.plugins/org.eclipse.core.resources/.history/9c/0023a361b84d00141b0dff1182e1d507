define([ "Floors" ,"PointerLockControls"], function(Floors, PointerLockControls) {

	var scene = null;
	var camera = null;
	var renderer = null;
	var cube = null;
	var size=20;

	var keyMove = {
		moveForward : false,
		moveBackward : false,
		moveLeft : false,
		moveRight : false
	};

	var cameraPosition = {
		x : 2,
		y : 0,
		z : 6
	}

	// document.addEventListener('keydown', onKeyDown, false);
	// document.addEventListener('keyup', onKeyUp, false);
	// window.addEventListener('resize', onWindowResize, false);

	var onKeyDown = function(event) {

		switch (event.keyCode) {

		case 38: // up
		case 87: // w
			keyMove.moveForward = true;
			break;

		case 37: // left
		case 65: // a
			keyMove.moveLeft = true;
			break;

		case 40: // down
		case 83: // s
			keyMove.moveBackward = true;
			break;

		case 39: // right
		case 68: // d
			keyMove.moveRight = true;
			break;
		}
	};

	var onKeyUp = function(event) {

		switch (event.keyCode) {

		case 38: // up
		case 87: // w
			keyMove.moveForward = false;
			break;

		case 37: // left
		case 65: // a
			keyMove.moveLeft = false;
			break;

		case 40: // down
		case 83: // s
			keyMove.moveBackward = false;
			break;

		case 39: // right
		case 68: // d
			keyMove.moveRight = false;
			break;
		}
	};

	function Control() {
		// scene = new THREE.Scene();
		// var width = window.innerWidth / window.innerHeight;
		// camera = new THREE.PerspectiveCamera(75, width, 0.1, 1000);

		// renderer = new THREE.WebGLRenderer({ antialias : true });
		// renderer.setSize(window.innerWidth, window.innerHeight);

		// document.body.appendChild(renderer.domElement);
		// document.addEventListener('keydown', onKeyDown, false);
		// document.addEventListener('keyup', onKeyUp, false);
		// window.addEventListener('resize', onWindowResize, false);
		// //cube = addCube(scene, camera, false, 1, 1);
		// addCubes(scene, camera, false);

		// var floors = new Floors();
		// floors.drawFloor(scene);

		// addLights();
		// render();
		init();
		animate();
	}

	function init() {

		var screenWidth = window.innerWidth / window.innerHeight;
		camera = new THREE.PerspectiveCamera(75, screenWidth, 1, 1000);

		scene = new THREE.Scene();
		scene.fog = new THREE.Fog(0xffffff, 0, 750);

		addCubes(scene, camera, false);

		doPointerLock();

		addLights();

		var floors = new Floors();
		floors.drawFloor(scene);

		raycaster = new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(
				0, -1, 0), 0, 10);

		renderer = new THREE.WebGLRenderer({
			antialias : true
		});

		renderer.setSize(window.innerWidth, window.innerHeight);
		document.body.appendChild(renderer.domElement);

		window.addEventListener('resize', onWindowResize, false);
	}

	function render() {

		if (keyMove.moveLeft) {
			cameraPosition.x -= 0.5;
		} else if (keyMove.moveRight) {
			cameraPosition.x += 0.5;
		} else if (keyMove.moveForward) {
			cameraPosition.z -= 0.5;
		} else if (keyMove.moveBackward) {
			cameraPosition.z += 0.5;
		}

		camera.position.set(cameraPosition.x, cameraPosition.y,
				cameraPosition.z);
		requestAnimationFrame(render);
		renderer.render(scene, camera);
	}

	function doPointerLock() {
		controls = new THREE.PointerLockControls(camera);
		var yawObject = controls.getObject();
		scene.add(yawObject);

		// Move camera to the 1, 1 position
		yawObject.position.x = size;
		yawObject.position.z = size;

		var ps = new PointerLockSetup(controls);
	}

	function animate() {

		requestAnimationFrame(animate);

		var xAxis = new THREE.Vector3(1, 0, 0);

		controls.isOnObject(false);

		var controlObject = controls.getObject();
		var position = controlObject.position;

		// drawText(controlObject, position);

		collisionDetection(position);

		// Move the camera
		controls.update();

		renderer.render(scene, camera);
	}

	function addCube(scene, camera, wireFrame, x, y) {
		var geometry = new THREE.BoxGeometry(1, 1, 1);
		// //var material = new THREE.MeshNormalMaterial({
		// // color : 0x00ffff,
		// // wireframe : wireFrame
		// //});
		var material = new THREE.MeshLambertMaterial({
			map : THREE.ImageUtils.loadTexture('images/crate.jpg')
		});
		var cube = new THREE.Mesh(geometry, material);
		cube.position.set(x, 0, y);
		scene.add(cube);

		return cube;
	}

	function addCubes(scene, camera, wireFrame) {
		for (var i = 0; i < 6; i++) {
			addCube(scene, camera, wireFrame, 1, i * 0.75);
			addCube(scene, camera, wireFrame, 3, i * 0.75);
		}
		;
		addSphere(scene, camera, false, 2, -3);
	}

	function addLights() {
		var light = new THREE.DirectionalLight(0xffffff, 1.5);
		light.position.set(1, 1, 1);
		scene.add(light);
		light = new THREE.DirectionalLight(0xffffff, 0.75);
		light.position.set(-1, -0.5, -1);
		scene.add(light);
	}

	function addSphere(scene, camera, wireFrame, x, y) {
		var geometry = new THREE.SphereGeometry(.5, 25, 25);
		var material = new THREE.MeshNormalMaterial({
			color : 0x00ffff,
			wireframe : wireFrame
		});

		var sphere = new THREE.Mesh(geometry, material);
		sphere.overdraw = true;
		sphere.position.set(x, 0, y);
		scene.add(sphere);

		return sphere;
	}

	function onWindowResize() {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize(window.innerWidth, window.innerHeight);
	}
	return Control;
});
